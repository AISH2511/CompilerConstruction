program moduleDeclarations otherModules driverModule otherModules  
moduleDeclarations moduleDeclaration moduleDeclarations
moduleDeclarations #
moduleDeclaration DECLARE MODULE ID SEMICOL  
otherModules module otherModules  
otherModules #
driverModule DRIVERDEF DRIVER PROGRAM DRIVERENDDEF moduleDef  
module DEF MODULE ID ENDDEF TAKES INPUT SQBO input_plist SQBC SEMICOL ret moduleDef  
ret RETURNS SQBO output_plist SQBC SEMICOL  
ret #  
input_plist ID COLON dataType n1
n1 COMMA ID COLON dataType n1
n1 #  
output_plist ID COLON type n2
n2 COMMA ID COLON type n2
n2 # 
dataType INTEGER 
dataType REAL 
dataType BOOLEAN 
dataType ARRAY SQBO range_arrays SQBC OF type
range_arrays index_arr RANGEOP index_arr
type INTEGER 
type REAL 
type BOOLEAN  
moduleDef START statements END  
statements statement statements  
statements #  
statement ioStmt
statement simpleStmt  
statement declareStmt  
statement condionalStmt  
statement iterativeStmt  
ioStmt GET_VALUE BO ID BC SEMICOL 
ioStmt PRINT BO var_print BC SEMICOL  
var_print ID p1 
var_print NUM  
var_print RNUM
var_print boolConstt
p1 SQBO sign new_index SQBC
p1 #
boolConstt TRUE
boolConstt FALSE
simpleStmt assignmentStmt 
simpleStmt moduleReuseStmt  
assignmentStmt ID whichStmt
whichStmt lvalueIDStmt 
whichStmt lvalueARRStmt  
lvalueIDStmt ASSIGNOP expression SEMICOL 
lvalueARRStmt SQBO element_index_with_expressions SQBC ASSIGNOP expression SEMICOL
index_arr sign new_index
new_index NUM
new_index ID
sign PLUS
sign MINUS
sign #
moduleReuseStmt optional USE MODULE ID WITH PARAMETERS actual_para_list SEMICOL
actual_para_list sign k actual_para_list'
actual_para_list' COMMA sign k actual_para_list'
actual_para_list' #
k NUM 
k RNUM
k boolConstt 
k ID n_11
n_11 SQBO element_index_with_expressions SQBC
n_11 #
optional SQBO idList SQBC ASSIGNOP 
optional #
idList ID n3 
n3 COMMA ID n3
n3 #
expression arithmeticOrBooleanExpr
expression u
u unary_op new_NT
new_NT BO arithmeticExpr BC
new_NT var_id_num
var_id_num ID
var_id_num NUM
var_id_num RNUM
unary_op PLUS
unary_op MINUS
arithmeticOrBooleanExpr anyTerm n7
n7 logicalOp anyTerm n7
n7 #
anyTerm arithmeticExpr n8 
anyTerm boolConstt 
n8 relationalOp arithmeticExpr 
n8 #
arithmeticExpr term n4
n4 op1 term n4
n4 # 
term factor n5
n5 op2 factor n5
n5 #
factor BO arithmeticOrBooleanExpr BC
factor NUM
factor RNUM
factor boolConstt
factor ID n_11
arrExpr arrTerm arr_n4
arr_n4 op1 arrTerm arr_n4
arr_n4 #
arrTerm arrFactor arr_n5
arr_n5 op2 arrFactor arr_n5
arr_n5 #
arrFactor ID
arrFactor NUM
arrFactor boolConstt
arrFactor BO arrExpr BC
element_index_with_expressions sign n_10
element_index_with_expressions arrExpr
n_10 new_index
n_10 BO arrExpr BC
op1 PLUS 
op1 MINUS 
op2 MUL 
op2 DIV
logicalOp AND 
logicalOp OR
relationalOp LT
relationalOp LE
relationalOp GT
relationalOp GE
relationalOp EQ
relationalOp NE
declareStmt DECLARE idList COLON dataType SEMICOL
condionalStmt SWITCH BO ID BC START caseStmts default END
caseStmts CASE value COLON statements BREAK SEMICOL n9
n9 CASE value COLON statements BREAK SEMICOL n9
n9 #
value NUM
value TRUE
value FALSE
default DEFAULT COLON statements BREAK SEMICOL
default #
iterativeStmt FOR BO ID IN range_for_loop BC START statements END
iterativeStmt WHILE BO arithmeticOrBooleanExpr BC START statements END
range_for_loop index_for_loop RANGEOP index_for_loop
index_for_loop sign_for_loop new_index_for_loop
new_index_for_loop NUM
sign_for_loop PLUS
sign_for_loop MINUS
sign_for_loop #